name: Create Monthly ECCO Release

# run both every month on the 3rd and also
# via the workflow_dispatch event
on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
  schedule:
    - cron: '0 0 3 * *'

jobs:
  create_release:
    runs-on: 'ubuntu-latest'

    # the pipeline needs to do the following:
    # 1. check out the repo
    # 2. set up docker with docker compose
    # 3. set the following env vars:
    #    - NONINTERACTIVE=1
    #    - FORCE_ACQUIRE_RELEASE=1
    #    - FORCE_DELETE_DB_BEFORE_IMPORT=1
    # 3. run the script ./data/pipeline/produce_release.sh
    # 4. copy the latest dump from /db-exports/ to /releases/
    # 5. create a new release on the repo with the dump as an asset

    steps:
    - uses: 'actions/checkout@v4'

    - name: Set up Docker Compose
      uses: docker/setup-compose-action@v1

    - name: Create random postgres db password
      run: |-
          # since we just need a shared pg secret, we'll randomly generate
          # one here
          echo "POSTGRES_PASSWORD=$( LC_ALL=C tr -dc '[a-zA-Z0-9]' </dev/urandom | head -c 13; echo )" >> $GITHUB_ENV

    # Enable tmate debugging of manually-triggered workflows if the input option was provided
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
  
    - name: Produce release
      env:
        NONINTERACTIVE: 1
        FORCE_ACQUIRE_RELEASE: 1
        FORCE_DELETE_DB_BEFORE_IMPORT: 1
        POSTGRES_DATABASE: "ecco"
        POSTGRES_USER: "postgres"
        POSTGRES_PORT: "5432"
        POSTGRES_HOST: "db"
        MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}
      run: |-
          cd ./data/pipeline
          ./produce_release.sh


    - name: Copy dump to releases
      run: |-
          # list the /db-exports folder and sort
          # by date, taking the most recent file
          cp $( ls -t /db-exports/ | head -n 1 ) /tmp/release/

    - name: Create release
      run: |-
          gh release create $( date +%Y-%m-%d ) /tmp/release/
