name: Create Monthly ECCO Database

# run both every month on the 3rd and also
# via the workflow_dispatch event
on:
  workflow_dispatch:
    inputs:
      create_release:
        type: boolean
        description: 'Publish the ECCO database dump as a GH release'
        required: false
        default: false
      create_release_pr:
        type: boolean
        description: 'Create a PR that includes the new dump'
        required: false
        default: true
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
  schedule:
    - cron: '0 0 3 * *'


jobs:
  create_release:
    runs-on: 'ubuntu-latest'
    env:
      NONINTERACTIVE: 1
      FORCE_ACQUIRE_RELEASE: 1
      FORCE_DELETE_DB_BEFORE_IMPORT: 1
      POSTGRES_DATABASE: "ecco"
      POSTGRES_USER: "postgres"
      POSTGRES_PORT: "5432"
      POSTGRES_HOST: "db"
      MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}
      CURDATE: ""
  
    # we need to be able to publish GH images, releases, and to create PRs
    # in this workflow
    permissions:
      packages: write
      contents: write
      pull-requests: write

    steps:
    - uses: 'actions/checkout@v4'

    - name: Write .env file with random pg password, other essentials
      run: |-
          # since we just need a shared pg secret, we'll randomly generate
          # one here
          export POSTGRES_PASSWORD=$( LC_ALL=C tr -dc '[a-zA-Z0-9]' < /dev/urandom | head -c 13; echo )

          # write it all out to .env
          cat <<EOF > .env
          POSTGRES_DATABASE="${POSTGRES_DATABASE}"
          POSTGRES_USER="${POSTGRES_USER}"
          POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
          POSTGRES_PORT="${POSTGRES_PORT}"
          POSTGRES_HOST="${POSTGRES_HOST}"
          MAPS_API_KEY="${MAPS_API_KEY}"
          EOF

    - name: Set up Docker Compose
      uses: docker/setup-compose-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: docker/bake-action@v6
      with:
        push: false
        load: true
        targets: backend,db
        files: |-
          docker-compose.yml
          docker-compose-cache.json

    # Enable tmate debugging of manually-triggered workflows if the input option was provided
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
  
    - name: Produce release
      run: |-
          cd ./data/pipeline
          ./produce_release.sh

    - name: Copy dump to releases
      run: |-
          # list the /db-exports folder and sort
          # by date, taking the most recent file
          mkdir -p /tmp/release/
          cd ./db-exports/
          export RELEASE_DB_DUMP=$( ls -t . | head -n 1 )
          cp ${RELEASE_DB_DUMP} /tmp/release/

          # write out the RELEASE_DB_DUMP to the environment
          echo "RELEASE_DB_DUMP=${RELEASE_DB_DUMP}" >> $GITHUB_ENV

    - name: Create GH release containing dumpfile
      if: ${{ github.event.inputs.create_release == 'true' }}
      env:
        GH_TOKEN: ${{ github.token }}
      run: |-
          gh release create $( date +%Y-%m-%d ) /tmp/release/${RELEASE_DB_DUMP}

    # - name: Create PR with the release database dump, for testing
    #   if: ${{ github.event.inputs.create_release_pr == 'true' }}
    #   env:
    #     GH_TOKEN: ${{ github.token }}
    #   run: |-
    #       # create a branch, add ./db-exports/${RELEASE_DB_DUMP}
    #       # and create a PR for it
    #       export CURDATE=$( date +%Y-%m-%d )
    #       export RELEASE_BRANCH="release-dump-${CURDATE}"

    #       git checkout -b ${RELEASE_BRANCH}
    #       git add ./db-exports/${RELEASE_DB_DUMP}
    #       git commit -m "Add database dump for ${CURDATE} release"
    #       git push origin ${RELEASE_BRANCH}

    #       gh pr create \
    #         --title "Release database dump for ${CURDATE}" \
    #         --body "This PR contains the database dump for the ${CURDATE} release." \
    #         --base ${RELEASE_BRANCH}

    - name: Add YYYY-mm-dd to the environment as CURDATE
      run: |
        export TZ=America/Denver
        echo "CURDATE=$( date +%Y-%m-%d )" >> $GITHUB_ENV

    - name: Create Pull Request
      if: ${{ github.event.inputs.create_release_pr == 'true' }}
      uses: peter-evans/create-pull-request@v7
      with:
        commit-message: 'Add database dump for ${{ env.CURDATE }} release'
        title: 'Release database dump for ${{ env.CURDATE }}'
        body: 'This PR contains the database dump for the ${{ env.CURDATE }} release.'
        branch: 'release-dump-${{ env.CURDATE }}'
        labels: 'release'
        draft: true
        add-paths: "./db-exports/"
